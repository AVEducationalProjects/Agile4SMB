@page "/goals"
@attribute [Authorize]

@using Agile4SMB.Client.Services
@using Agile4SMB.Shared.Domain
@using Microsoft.AspNetCore.Authorization

@inject GoalsService GoalsService

@if (_goals != null)
{
    <div class="d-flex w-100 justify-content-between mb-3">
        <button class="btn btn-sm btn-success" @onclick="AddGoal"><i class="oi oi-fire" />&nbsp;Новая</button>
    </div>

    <div class="list-group">
        @foreach (var goal in _goals)
        {
            <EditForm Model="@goal">
                <div class="form-row mb-3">
                    <div class="form-group col-11">
                        <label>Название цели</label>
                        <input class="form-control form-control-sm" type="text" value="@goal.Name"
                               @onchange="@(async(e)=>await UpdateGoalName(goal, e))" />
                    </div>
                    <div class="form-group col-1 text-right">
                        <button class="btn btn-sm btn-outline-danger"
                                @onclick="() => DeleteGoal(goal)">
                            <i class="oi oi-x"></i>
                        </button>
                    </div>
                    <div class="form-group col-11">
                        <label>Описание</label>
                        <textarea class="form-control form-control-sm" type="text" value="@goal.Description"
                                  @onchange="@(async(e)=>await UpdateGoalDescription(goal, e))"></textarea>
                    </div>
                </div>
            </EditForm>
        }
    </div>
}


@code{

    IEnumerable<Goal> _goals;

    protected override async Task OnInitializedAsync()
    {
        _goals = await GoalsService.GetGoals();
    }

    private async Task AddGoal()
    {
        await GoalsService.CreateGoal("Новая цель");
        _goals = await GoalsService.GetGoals();
        StateHasChanged();
    }

    private async Task DeleteGoal(Goal goal)
    {
        await GoalsService.DeleteGoal(goal);
        _goals = await GoalsService.GetGoals();
        StateHasChanged();
    }

    private async Task UpdateGoalName(Goal goal, ChangeEventArgs changeEventArgs)
    {
        goal.Name = changeEventArgs.Value.ToString();
        await GoalsService.UpdateGoal(goal);
    }

    private async Task UpdateGoalDescription(Goal goal, ChangeEventArgs changeEventArgs)
    {
        goal.Description = changeEventArgs.Value.ToString();
        await GoalsService.UpdateGoal(goal);
    }
}