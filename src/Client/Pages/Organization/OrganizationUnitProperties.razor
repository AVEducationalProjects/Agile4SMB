@using Agile4SMB.Shared
@using Agile4SMB.Client.Services
@using Agile4SMB.Client.Utils
@using Agile4SMB.Shared.Domain
@using Task = System.Threading.Tasks.Task

@inject UserUnitService UserUnitService

@if (Unit != null)
{
    <div class="d-flex w-100 justify-content-between mb-3 pt-2">
        <button class="btn btn-sm btn-success" @onclick="AddChild"><i class="oi oi-people" />&nbsp;Новое</button>
        <button class="btn btn-sm btn-danger" @onclick="Delete"><i class="oi oi-x" />&nbsp;Удалить</button>
    </div>

    <EditForm Model="@Unit">
        <div class="form-group">
            <label for="unitName">Название подразделения</label>
            <input id="unitName" class="form-control" value="@Unit.Name"
                   @oninput="BindName" @onchange="UpdateData" />
        </div>

        <div class="form-group">
            <label for="unitBacklogs">Беклоги</label>
            <div class="list-group">
                @foreach (var backlog in Unit.Backlogs)
                {
                    <div class="form-row">
                        <div class="form-group col-11">
                            <input class="form-control form-control-sm" type="text"
                                   value="@backlog.Name" @onchange="@(async (e) => await UpdateBacklogName(backlog, e))" />
                        </div>
                        <div class="form-group col-1 text-right">
                            <button class="btn btn-sm btn-outline-danger"
                                    @onclick="()=>DeleteBacklog(backlog)">
                                <i class="oi oi-x"></i>
                            </button>
                        </div>
                    </div>
                }
            </div>

            <button id="addBacklog" class="btn btn-sm btn-outline-success" @onclick="AddBacklog"> Добавить беклог </button>
        </div>

    </EditForm>
}

@code {

    [Parameter] public OrganizationUnit Unit { get; set; }

    [Parameter] public ISelectObserver<OrganizationUnit> SelectObserver { get; set; }


    private async Task AddChild()
    {
        var child = await UserUnitService.AddChildOrganizationUnit(Unit, "Новое подразделение");
        await SelectObserver.Select(child);
    }

    private async Task Delete()
    {
        var parent = await UserUnitService.DeleteOrganizationUnit(Unit);
        await SelectObserver.Select(parent);
    }

    private void BindName(ChangeEventArgs e)
    {
        Unit.Name = e.Value.ToString();
        SelectObserver.Update();
    }

    private async Task UpdateData()
    {
        await UserUnitService.UpdateOrganizationUnit(Unit);
    }

    private async Task AddBacklog()
    {
        await UserUnitService.CreateBacklog(Unit, "Новый беклог");
        await SelectObserver.Select(UserUnitService.GetOrganizationUnit(Unit.Id));
    }

    private async Task DeleteBacklog(BacklogDefinition backlog)
    {
        await UserUnitService.DeleteBacklog(backlog);
        await SelectObserver.Select(UserUnitService.GetOrganizationUnit(Unit.Id));
    }


    private async Task UpdateBacklogName(BacklogDefinition backlog, ChangeEventArgs changeEventArgs)
    {
        backlog.Name = changeEventArgs.Value.ToString();
        await UserUnitService.UpdateBacklog(backlog);
    }

}
