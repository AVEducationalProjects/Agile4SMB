@using Agile4SMB.Client.Utils
@using Agile4SMB.Shared.Domain
@using Agile4SMB.Client.Services
@inject UserUnitService UserUnitService
@inject BacklogService BacklogService

@if (SelectedProject != null)
{
    <div>
        <div class="form-group">
            <strong for="projectName">Название проекта</strong>
            <input id="projectName"
                   readonly class="form-control"
                   value="@SelectedProject.Name">
        </div>
            
        <div class="form-group">
            <label>Соответствие целям</label>
            <ul>
                @foreach (var goal in SelectedProject.Goals)
                {
                    <li>@goal.Name</li>
                }    
            </ul>
        </div>
            
        <div class="form-group">
            <label for="projectAssignee">Ответственный</label>
            <input id="projectAssignee" 
                   readonly class="form-control" 
                   value="@UserUnitService.GetOrganizationUnit(SelectedProject.UnitId).Name">
        </div>
        
        <div class="form-group">
            <label for="projectAssignee">Задачи</label>
            <div class="list-group">
                @foreach (var task in SelectedProject.Tasks)
                {
                    <div class="form-row">
                        <div class="col-1">
                            <input disabled="true" class="form-control form-control-sm" type="checkbox" checked="@task.Done">
                        </div>
                        <div class="col-6">
                            <input readonly class="form-control" value="@task.Name">
                        </div>
                        <div class="col-5">
                            <input readonly class="form-control"
                                   value="@UserUnitService.GetOrganizationUnit(task.UnitId).Name">
                        </div>
                    </div>
                }
            </div>
        </div>
        
        <div class="form-group">
            <div class="row">
                <div class="col">
                    <button class="btn btn-sm btn-outline-success" @onclick="AddBacklog">Создать бэклог на основе проекта</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public ISelectObserver<Project> SelectObserver { get; set; }
    [Parameter] public Project SelectedProject { get; set; }
    [Parameter] public OrganizationUnit SelectedUnit { get; set; }

    private string NewBacklogName { get; set; }


    protected async Task AddBacklog()
    {
        var copiedBacklog = await UserUnitService.CreateBacklog(SelectedUnit, SelectedProject.Name);
        var projectInBacklog = await BacklogService.
            CreateProjectInBacklog(SelectedProject.Name, copiedBacklog, SelectedUnit);

        var project = await CopyProjectData(projectInBacklog.Item2);
        await BacklogService.UpdateProject(project);
        
        async Task<Project>  CopyProjectData(Project project)
        {
            foreach (var task in SelectedProject.Tasks)
            {
                await BacklogService.CreateTaskInProject(project, task.Name, UserUnitService.GetOrganizationUnit(task.UnitId));
            }
            foreach (var goal in SelectedProject.Goals)
            {
                await BacklogService.AddProjectGoal(project, goal.Id, goal.Name);
            }
            return project;
        }
        StateHasChanged();
    }
}